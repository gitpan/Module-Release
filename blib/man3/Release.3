.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Release 3"
.TH Release 3 "2006-09-25" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Module::Release \- Automate software releases
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Module::Release;
.Ve
.PP
.Vb 1
\&        my $release = Module::Release->new( %params );
.Ve
.PP
.Vb 3
\&        # call methods to automate your release process
\&        $release->check_cvs;
\&        ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Module::Release\*(C'\fR automates your software release process. It started as
a script that automated my (brian) release process, so it has bits to
talk to \s-1PAUSE\s0 (\s-1CPAN\s0) and SourceForge, and to use \f(CW\*(C`Makefile.PL\*(C'\fR and
\&\f(CW\*(C`CVS\*(C'\fR. Other people have extended this in other modules under the same
namespace so you can use \f(CW\*(C`Module::Build\*(C'\fR, \f(CW\*(C`svn\*(C'\fR, and many other things.
.PP
The methods represent a step in the release process. Some of them check a
condition (e.g. all tests pass) and die if that doesn't work.
\&\f(CW\*(C`Module::Release\*(C'\fR doesn't let you continue if something is wrong. Once
you have checked everything, use the upload features to send your files
to the right places.
.PP
The included \f(CW\*(C`release\*(C'\fR script is a good starting place. Don't be afraid to
edit it for your own purposes.
.Sh "Configuration"
.IX Subsection "Configuration"
\&\f(CW\*(C`Module::Release\*(C'\fR looks at several sources for configuration information.
.PP
\fIPerl setup\fR
.IX Subsection "Perl setup"
.PP
\&\f(CW\*(C`Module::Release\*(C'\fR looks at \f(CW\*(C`Config\*(C'\fR to get the values it needs for
certain operations.
.IP "make" 4
.IX Item "make"
The name of the program to run for the \f(CW\*(C`make\*(C'\fR steps
.PP
\fIEnvironment variables\fR
.IX Subsection "Environment variables"
.IP "\s-1PERL\s0" 4
.IX Item "PERL"
Use this value as the perl interpreter, otherwise use the value in \f(CW$^X\fR
.IP "\s-1RELEASE_DEBUG\s0" 4
.IX Item "RELEASE_DEBUG"
Do you want debugging output? Set this to a true value
.IP "\s-1SF_PASS\s0" 4
.IX Item "SF_PASS"
Your SourceForge password. If you don't set this and you want to upload
to SourceForge, you should be prompted for it. Failing that, the module
tries to upload anonymously but cannot claim the file for you.
.IP "\s-1CPAN_PASS\s0" 4
.IX Item "CPAN_PASS"
Your \s-1CPAN\s0 password. If you don't set this and you want to upload
to \s-1PAUSE\s0, you should be prompted for it. Failing that, the module
tries to upload anonymously but cannot claim the file for you.
.PP
\fI\f(CI\*(C`.releaserc\*(C'\fI\fR
.IX Subsection ".releaserc"
.PP
\&\f(CW\*(C`Module::Release\*(C'\fR looks for either \f(CW\*(C`.releaserc\*(C'\fR or \f(CW\*(C`releaserc\*(C'\fR in
the current working directory. It reads that with \f(CW\*(C`ConfigReader::Simple\*(C'\fR
to get these values:
.IP "release_subclass" 4
.IX Item "release_subclass"
The subclass of \f(CW\*(C`Module::Release\*(C'\fR that you want to use. This allows
you to specify the subclass via a \fI.releaserc\fR file; otherwise you
wouldn't be able to use the \f(CW\*(C`release\*(C'\fR script because the
\&\f(CW\*(C`Module::Release\*(C'\fR class name is hard-coded there.
.IP "makefile_PL" 4
.IX Item "makefile_PL"
The name of the file to run as \fIMakefile.PL\fR.  The default is
\&\f(CW"Makefile.PL"\fR, but you can set it to \f(CW"Build.PL"\fR to use a
\&\f(CW\*(C`Module::Build\*(C'\fR\-based system.
.IP "makefile" 4
.IX Item "makefile"
The name of the file created by \f(CW\*(C`makefile_PL\*(C'\fR above.  The default is
\&\f(CW"Makefile"\fR, but you can set it to \f(CW"Build"\fR for
\&\f(CW\*(C`Module::Build\*(C'\fR\-based systems.
.IP "cpan_user" 4
.IX Item "cpan_user"
Your \s-1PAUSE\s0 user id.
.IP "sf_user" 4
.IX Item "sf_user"
Your SourceForge account (i.e. login) name.
.IP "passive_ftp" 4
.IX Item "passive_ftp"
Set this to a true value to enable passive \s-1FTP\s0.
.IP "sf_group_id" 4
.IX Item "sf_group_id"
The Group \s-1ID\s0 of your SourceForge project. This is a numeric \s-1ID\s0 given to
the project usually, and you can see it in the URLs when you browse
the SourceForge files area.
.IP "sf_package_id" 4
.IX Item "sf_package_id"
The Package \s-1ID\s0 of your SourceForge package. This is a numeric \s-1ID\s0 given to
a particular file release, and you can see it in the URLs when you browse
the SourceForge files area.
.IP "sf_release_match" 4
.IX Item "sf_release_match"
This is a regular expression. Given the file release name that
\&\f(CW\*(C`Module::Release\*(C'\fR picks (e.g. \*(L"Foo\-Bar\-1.15.tgz\*(R"), you can run a
substitution on it. The replacement string is in \f(CW\*(C`sf_release_replace\*(C'\fR.
.IP "sf_release_replace" 4
.IX Item "sf_release_replace"
This is a regular expression. Given the file release name that
\&\f(CW\*(C`Module::Release\*(C'\fR picks (e.g. \*(L"Foo\-Bar\-1.15.tgz\*(R"), you can run a
substitution on it. The regex portion is in \f(CW\*(C`sf_release_match\*(C'\fR.
.IP "sf_type_id 5002" 4
.IX Item "sf_type_id 5002"
The distribution type (e.g. \*(L"gzipped source\*(R") of the package, by numeric
\&\s-1ID\s0 that you have to look up on your own from the SourceForge form. The
default is 5002 (\*(L".gz source\*(R").
.IP "sf_processor_id" 4
.IX Item "sf_processor_id"
The processor type (e.g. Intel Pentium) of the package, by numeric
\&\s-1ID\s0 that you have to look up on your own from the SourceForge form.
The default is 8000 (\*(L"Any\*(R").
.Sh "Methods"
.IX Subsection "Methods"
If you don't like what any of these methods do, override them in a subclass.
.IP "\fInew()\fR" 4
.IX Item "new()"
Create a Module::Release object.  Any arguments passed are assumed to
be key-value pairs that override the default values.
.IP "config" 4
.IX Item "config"
Get the configuration object. By default this is a \f(CW\*(C`ConfigReader::Simple\*(C'\fR
object;
.IP "debug" 4
.IX Item "debug"
Get the value of the debugging flag.
.IP "debug_on" 4
.IX Item "debug_on"
Turn on debugging
.IP "debug_off" 4
.IX Item "debug_off"
Turn off debugging
.IP "ua" 4
.IX Item "ua"
Get the value of the web user agent.
.IP "clean" 4
.IX Item "clean"
Run `make realclean`
.IP "\fIbuild_makefile()\fR" 4
.IX Item "build_makefile()"
Runs `perl Makefile.PL 2>&1`.
.Sp
This step ensures that we start off fresh and pick up any changes in
\&\f(CW\*(C`Makefile.PL\*(C'\fR.
.IP "\fItest()\fR" 4
.IX Item "test()"
Run `make test`. If any tests fail, it dies.
.IP "\fIdist()\fR" 4
.IX Item "dist()"
Run `make dist`. As a side effect determines the distribution
name if not set on the command line.
.IP "dist_test" 4
.IX Item "dist_test"
Run `make disttest`. If the tests fail, it dies.
.IP "dist_version" 4
.IX Item "dist_version"
Return the distribution version ( set in \fIdist()\fR )
.IP "dist_version_format" 4
.IX Item "dist_version_format"
Return the distribution version ( set in \fIdist()\fR )
.Sp
# \s-1XXX\s0 make this configurable
.IP "check_manifest" 4
.IX Item "check_manifest"
Run `make manifest` and report anything it finds. If it gives output,
die. You should check \f(CW\*(C`MANIFEST\*(C'\fR to ensure it has the things it needs.
If files that shouldn't show up do, put them in \s-1MANIFEST\s0.SKIP.
.Sp
Since `make manifest` takes care of things for you, you might just have
to re-run your release script.
.IP "check_cvs" 4
.IX Item "check_cvs"
Run `cvs update` and report the state of the repository. If something
isn't checked in or imported, die.
.IP "check_for_passwords" 4
.IX Item "check_for_passwords"
Get passwords for \s-1CPAN\s0 or SourceForge.
.IP "ftp_upload" 4
.IX Item "ftp_upload"
Upload the files to the \s-1FTP\s0 servers
.IP "pause_claim" 4
.IX Item "pause_claim"
Claim the file in \s-1PAUSE\s0
.IP "cvs_tag" 4
.IX Item "cvs_tag"
Tag the release in local \s-1CVS\s0. The tag name comes from \f(CW\*(C`make_cvs_tag\*(C'\fR.
.IP "make_cvs_tag" 4
.IX Item "make_cvs_tag"
By default, examines the name of the remote file
(i.e. \fIFoo\-Bar\-0.04.tar.gz\fR) and constructs a \s-1CVS\s0 tag like
\&\f(CW\*(C`RELEASE_0_04\*(C'\fR from it.  Override this method if you want to use a
different tagging scheme.
.IP "sf_user( [ \s-1SF_USER\s0 ] )" 4
.IX Item "sf_user( [ SF_USER ] )"
Set or \s-1GET\s0 the SourceForge user name
.IP "sf_login" 4
.IX Item "sf_login"
Authenticate with Sourceforge
.IP "\fIsf_qrs()\fR" 4
.IX Item "sf_qrs()"
Visit the Quick Release System form
.IP "\fIsf_release()\fR" 4
.IX Item "sf_release()"
Release the file to Sourceforge
.IP "\fIget_readme()\fR" 4
.IX Item "get_readme()"
Read and parse the \fI\s-1README\s0\fR file.  This is pretty specific, so
you may well want to overload it.
.IP "\fIget_changes()\fR" 4
.IX Item "get_changes()"
Read and parse the \fIChanges\fR file.  This is pretty specific, so
you may well want to overload it.
.IP "run" 4
.IX Item "run"
Run a command in the shell.
.IP "run_error" 4
.IX Item "run_error"
Returns true if the command ran successfully, and false otherwise. Use
this function in any other method that calls run to figure out what to
do when a command doesn't work. You may want to handle that yourself.
.IP "getpass" 4
.IX Item "getpass"
Get a password from the user if it isn't found.
.SH "TO DO"
.IX Header "TO DO"
* What happened to my Changes munging?
.SH "CREDITS"
.IX Header "CREDITS"
Ken Williams turned my initial \fIrelease\fR\|(1) script into the present
module form.
.PP
Andy Lester handled the maintenance while I was on my Big Camping
Trip. He applied patches from many authors.
.PP
Andreas Koenig suggested changes to make it work better with \s-1PAUSE\s0.
.PP
Chris Nandor helped with figuring out the broken SourceForge stuff.
.SH "SOURCE AVAILABILITY"
.IX Header "SOURCE AVAILABILITY"
This source is part of a SourceForge project which always has the
latest sources in \s-1CVS\s0, as well as all of the previous releases. This
source now lives in the \*(L"Module/Release\*(R" section of the repository,
and older sources live in the \*(L"release\*(R" section.
.PP
.Vb 1
\&        http://sourceforge.net/projects/brian-d-foy/
.Ve
.PP
If, for some reason, I disappear from the world, one of the other
members of the project can shepherd this module appropriately.
.SH "AUTHOR"
.IX Header "AUTHOR"
brian d foy, \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2006 brian d foy.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
