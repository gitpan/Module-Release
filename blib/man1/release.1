.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RELEASE 1"
.TH RELEASE 1 "2006-05-20" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
release \- upload files to the CPAN and SourceForge.net
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        release [ LOCAL_FILE REMOTE_FILE ]
.Ve
.PP
.Vb 2
\&        # try a dry run without uploading anything
\&        release -t
.Ve
.PP
.Vb 2
\&        # print a help message
\&        release -h
.Ve
.PP
.Vb 2
\&        # print debugging information
\&        release -d
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program automates Perl module releases.  It makes the distribution,
tests it, checks that \s-1CVS\s0 is up to date, tags \s-1CVS\s0, uploads it to
the \s-1PAUSE\s0 anonymous \s-1FTP\s0 directory and to the incoming directory for
SourceForge.net, claims it on \s-1PAUSE\s0 for your \s-1CPAN\s0 account, and releases
it on SourceForge.net.
.Sh "Process"
.IX Subsection "Process"
The release script checks many things before it actually releases
the file.  Some of these are annoying, but they are also the last
line of defense against releasing bad distributions.
.IP "Read the configuration data" 4
.IX Item "Read the configuration data"
Look in the current working directory for \f(CW\*(C`.releaserc\*(C'\fR.  See
the Configuration section.  If release cannot find the
configuration file, it dies.
.IP "make the distribution" 4
.IX Item "make the distribution"
Run make realclean, perl Makefile.PL to get to a stable starting
point.
.IP "Check \s-1MANIFEST\s0" 4
.IX Item "Check MANIFEST"
Run make manifest and die if it does anything to change \s-1MANIFEST\s0.
If it does something, you need to decide if you like what it did
then check in the new version of \s-1MANIFEST\s0.
.IP "Test the distribution" 4
.IX Item "Test the distribution"
Run make test, make dist, make disttest.  If testing fails, release
dies.  make dist provides the name of the distribution if \s-1LOCAL_FILE\s0
is not provided on the command line.
.IP "Check that \s-1CVS\s0 is up-to-date" 4
.IX Item "Check that CVS is up-to-date"
You can release a file without \s-1CVS\s0 being up\-to\-date, but this
script also tags the repository with the version number of the
release, so it insists on \s-1CVS\s0 being up\-to\-date.  It fails otherwise.
.IP "Upload to \s-1PAUSE\s0 and SourceForge.net" 4
.IX Item "Upload to PAUSE and SourceForge.net"
Simply drop the distribution in the incoming/ directory of these
servers.
.IP "Claim the file on \s-1PAUSE\s0" 4
.IX Item "Claim the file on PAUSE"
Connect to the \s-1PAUSE\s0 web thingy and claim the uploaded file for your
\&\s-1CPAN\s0 account.
.IP "Tag the repository" 4
.IX Item "Tag the repository"
Use the version number (in the distribution name) to tag
the repository.  You should be able to checkout the code
from any release.
.IP "Release to SourceForge.net" 4
.IX Item "Release to SourceForge.net"
The release name is the distribution name without the .tar.gz.
The file name is the distribution name.  SourceForge.net divides
things into projects (with project IDs) and packages within
the project (with package IDs).  Specify these in the
configuration file.
.Sh "Configuration"
.IX Subsection "Configuration"
The release script uses a configuration file in the current working
directory.  The file name is \fI.releaserc\fR.  Although most of the
information is the same for all of your projects, the \f(CW\*(C`sf_package_id\*(C'\fR
is probably different.  You can get the \f(CW\*(C`sf_package_id\*(C'\fR from the data
in the Quick Release Form.
.PP
release's own \fI.releaserc\fR looks like this:
.PP
.Vb 4
\&    sf_user petdance
\&    sf_group_id 36221
\&    sf_package_id 56559
\&    cpan_user PETDANCE
.Ve
.IP "cpan_user" 4
.IX Item "cpan_user"
.PD 0
.IP "sf_user" 4
.IX Item "sf_user"
.PD
If \f(CW\*(C`cpan_user\*(C'\fR or \f(CW\*(C`sf_user\*(C'\fR is set to \f(CW\*(C`<none>\*(C'\fR, the program will
skip releasing for that system.  You must release for at least one system.
.IP "sf_group_id" 4
.IX Item "sf_group_id"
.PD 0
.IP "sf_package_id" 4
.IX Item "sf_package_id"
.IP "sf_processor_id" 4
.IX Item "sf_processor_id"
.IP "sf_type_id" 4
.IX Item "sf_type_id"
.IP "sf_release_match" 4
.IX Item "sf_release_match"
.IP "sf_release_replace" 4
.IX Item "sf_release_replace"
.PD
To find \f(CW\*(C`sf_package_id\*(C'\fR and \f(CW\*(C`sf_group_id\*(C'\fR, go to the Add/Edit
Release page for your project.  The link for \*(L"[Add Release]\*(R" might
look something like this (this is the link for the \fIrelease\fR package
itself):
.Sp
.Vb 1
\&    https://sourceforge.net/project/admin/newrelease.php?package_id=56559&group_id=36221
.Ve
.Sp
so \f(CW\*(C`sf_package_id\*(C'\fR is 56559 and \f(CW\*(C`sf_group_id\*(C'\fR is 36221.
.Sp
\&\f(CW\*(C`sf_processor_id\*(C'\fR and \f(CW\*(C`sf_type_id\*(C'\fR are optional, and default to \*(L"Any\*(R"
and \*(L"Source .gz\*(R".  See the \s-1HTML\s0 in a file release form on SourceForge.net
for other options.
.Sp
\&\f(CW\*(C`sf_release_match\*(C'\fR and \f(CW\*(C`sf_release_replace\*(C'\fR are for defining the release
name, if you don't like the default.  For example, the default would
set the name for this program to something like \*(L"release\-0.10\*(R".
But if you want the name to be only the version number, set
\&\f(CW\*(C`sf_release_match=^.+\-([\ed.]+)$\*(C'\fR and \f(CW\*(C`sf_release_replace=$1\*(C'\fR.
.IP "passive_ftp" 4
.IX Item "passive_ftp"
Set \f(CW\*(C`passive_ftp\*(C'\fR to \*(L"y\*(R" or \*(L"yes\*(R" for passive \s-1FTP\s0 transfers.  Usually
this is to get around a firewall issue.
.IP "release_subclass" 4
.IX Item "release_subclass"
Specify the name of a subclass to use instead of Module::Release.  The
subclass can override any of the Module::Release methods.  This makes
it possible to maintain your own local releasing procedures.  For
instance, one such subclass might look like this:
.Sp
.Vb 2
\&  package Module::Release::KWILLIAMS;
\&  use base qw(Module::Release);
.Ve
.Sp
.Vb 7
\&  sub make_cvs_tag {
\&    my $self = shift;
\&    (my $version) = $self->{remote} =~ / - (\ed[\ew.]*) \e.tar \e.gz $/x;
\&    $version =~ s/[^a-z0-9_]/_/gi;
\&    return "release-$version";
\&  }
\&  1;
.Ve
.Sp
To use this subclass, you'd put it in your \f(CW@INC\fR somewhere, then set
\&\f(CW\*(C`release_subclass\*(C'\fR to \f(CW\*(C`Module::Release::KWILLIAMS\*(C'\fR.
.Sh "Environment"
.IX Subsection "Environment"
.IP "* \s-1CPAN_PASS\s0" 4
.IX Item "CPAN_PASS"
.PD 0
.IP "* \s-1SF_PASS\s0" 4
.IX Item "SF_PASS"
.PD
release reads the \f(CW\*(C`CPAN_PASS\*(C'\fR and \f(CW\*(C`SF_PASS\*(C'\fR environment variables to
set the passwords for \s-1PAUSE\s0 and SourceForge.net, respectively.  Of course,
you don't need to set the password for a system you're not uploading to.
.IP "* \s-1RELEASE_DEBUG\s0" 4
.IX Item "RELEASE_DEBUG"
The \f(CW\*(C`RELEASE_DEBUG\*(C'\fR environment variable sets the debugging value,
which is 0 by default.  Set \f(CW\*(C`RELEASE_DEBUG\*(C'\fR to a true value to get
debugging output.
.IP "* \s-1PERL\s0" 4
.IX Item "PERL"
The \f(CW\*(C`PERL\*(C'\fR environment variable sets the path to perl for use in the
make; otherwise, the perl used to run release will be used.
.SH "TO DO"
.IX Header "TO DO"
.IP "* check make disttest (to catch \s-1MANIFEST\s0 errors) \*(-- needs error catching and reporting" 4
.IX Item "check make disttest (to catch MANIFEST errors)  needs error catching and reporting"
.SH "SOURCE AVAILABILITY"
.IX Header "SOURCE AVAILABILITY"
This source is part of a SourceForge.net project which always has the
latest sources in \s-1CVS\s0, as well as all of the previous releases.
.PP
.Vb 1
\&        http://sourceforge.net/projects/brian-d-foy/
.Ve
.PP
If, for some reason, I disappear from the world, one of the other
members of the project can shepherd this software appropriately.
.SH "AUTHOR"
.IX Header "AUTHOR"
brian d foy, \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR and
Andy Lester, \f(CW\*(C`<andy@petdance.com>\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002\-2005, brian d foy, All rights reserved.
.PP
You may use this software under the same terms as Perl itself.
